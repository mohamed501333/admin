// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/moderls.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5766817127886087310),
      name: 'ChipBlockModel',
      lastPropertyId: const IdUid(14, 6933484263989904874),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7047598725054373159),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7494847655725877467),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5373123020180861790),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2619053772108324263),
            name: 'density',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5425707442905255812),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 857032885791670872),
            name: 'serial',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8369124864272671287),
            name: 'number',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4213282529751350916),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8830288111525140463),
            name: 'lenth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5747086196920148615),
            name: 'scissor',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8094156766797092793),
            name: 'hight',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4204673584453909539),
            name: 'wight',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5649748582041743292),
            name: 'notes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6933484263989904874),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4834809552106828592),
      name: 'ChipFraction',
      lastPropertyId: const IdUid(4, 3612354499078491459),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 880670482980990046),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7474492443085524871),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 832437133360807654),
            name: 'lenth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3612354499078491459),
            name: 'hight',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 4834809552106828592),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ChipBlockModel: EntityDefinition<ChipBlockModel>(
        model: _entities[0],
        toOneRelations: (ChipBlockModel object) => [],
        toManyRelations: (ChipBlockModel object) => {},
        getId: (ChipBlockModel object) => object.id,
        setId: (ChipBlockModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChipBlockModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final colorOffset = fbb.writeString(object.color);
          final typeOffset = fbb.writeString(object.type);
          final serialOffset = fbb.writeString(object.serial);
          final notesOffset = fbb.writeString(object.notes);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, colorOffset);
          fbb.addFloat64(3, object.density);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, serialOffset);
          fbb.addFloat64(6, object.number);
          fbb.addFloat64(7, object.width);
          fbb.addFloat64(8, object.lenth);
          fbb.addFloat64(9, object.scissor);
          fbb.addFloat64(10, object.hight);
          fbb.addFloat64(11, object.wight);
          fbb.addOffset(12, notesOffset);
          fbb.addOffset(13, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final densityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final serialParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final numberParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final lenthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final scissorParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final hightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final wightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final object = ChipBlockModel(
              id: idParam,
              title: titleParam,
              color: colorParam,
              density: densityParam,
              type: typeParam,
              serial: serialParam,
              number: numberParam,
              width: widthParam,
              lenth: lenthParam,
              scissor: scissorParam,
              hight: hightParam,
              wight: wightParam,
              notes: notesParam,
              description: descriptionParam);

          return object;
        }),
    ChipFraction: EntityDefinition<ChipFraction>(
        model: _entities[1],
        toOneRelations: (ChipFraction object) => [],
        toManyRelations: (ChipFraction object) => {},
        getId: (ChipFraction object) => object.id,
        setId: (ChipFraction object, int id) {
          object.id = id;
        },
        objectToFB: (ChipFraction object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.width);
          fbb.addFloat64(2, object.lenth);
          fbb.addFloat64(3, object.hight);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lenthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final hightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = ChipFraction(
              id: idParam,
              width: widthParam,
              lenth: lenthParam,
              hight: hightParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ChipBlockModel] entity fields to define ObjectBox queries.
class ChipBlockModel_ {
  /// see [ChipBlockModel.id]
  static final id =
      QueryIntegerProperty<ChipBlockModel>(_entities[0].properties[0]);

  /// see [ChipBlockModel.title]
  static final title =
      QueryStringProperty<ChipBlockModel>(_entities[0].properties[1]);

  /// see [ChipBlockModel.color]
  static final color =
      QueryStringProperty<ChipBlockModel>(_entities[0].properties[2]);

  /// see [ChipBlockModel.density]
  static final density =
      QueryDoubleProperty<ChipBlockModel>(_entities[0].properties[3]);

  /// see [ChipBlockModel.type]
  static final type =
      QueryStringProperty<ChipBlockModel>(_entities[0].properties[4]);

  /// see [ChipBlockModel.serial]
  static final serial =
      QueryStringProperty<ChipBlockModel>(_entities[0].properties[5]);

  /// see [ChipBlockModel.number]
  static final number =
      QueryDoubleProperty<ChipBlockModel>(_entities[0].properties[6]);

  /// see [ChipBlockModel.width]
  static final width =
      QueryDoubleProperty<ChipBlockModel>(_entities[0].properties[7]);

  /// see [ChipBlockModel.lenth]
  static final lenth =
      QueryDoubleProperty<ChipBlockModel>(_entities[0].properties[8]);

  /// see [ChipBlockModel.scissor]
  static final scissor =
      QueryDoubleProperty<ChipBlockModel>(_entities[0].properties[9]);

  /// see [ChipBlockModel.hight]
  static final hight =
      QueryDoubleProperty<ChipBlockModel>(_entities[0].properties[10]);

  /// see [ChipBlockModel.wight]
  static final wight =
      QueryDoubleProperty<ChipBlockModel>(_entities[0].properties[11]);

  /// see [ChipBlockModel.notes]
  static final notes =
      QueryStringProperty<ChipBlockModel>(_entities[0].properties[12]);

  /// see [ChipBlockModel.description]
  static final description =
      QueryStringProperty<ChipBlockModel>(_entities[0].properties[13]);
}

/// [ChipFraction] entity fields to define ObjectBox queries.
class ChipFraction_ {
  /// see [ChipFraction.id]
  static final id =
      QueryIntegerProperty<ChipFraction>(_entities[1].properties[0]);

  /// see [ChipFraction.width]
  static final width =
      QueryDoubleProperty<ChipFraction>(_entities[1].properties[1]);

  /// see [ChipFraction.lenth]
  static final lenth =
      QueryDoubleProperty<ChipFraction>(_entities[1].properties[2]);

  /// see [ChipFraction.hight]
  static final hight =
      QueryDoubleProperty<ChipFraction>(_entities[1].properties[3]);
}
